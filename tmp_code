# Identify continuous columns
continuous_cols <- sapply(df, is.numeric)

# Scale only the continuous columns
scaled_continuous <- scale(df[, continuous_cols])

# Convert the scaled matrix back to a data frame
scaled_continuous <- as.data.frame(scaled_continuous)

# Rename the scaled columns
colnames(scaled_continuous) <- paste0("scaled_", colnames(df)[continuous_cols])

# Combine scaled continuous columns with original categorical columns
final_df <- cbind(scaled_continuous, df[, !continuous_cols, drop = FALSE])



library(caret)
library(class)

# Assuming 'df' is your pre-scaled data frame and 'attrition' is the target variable
set.seed(123)  # For reproducibility

# Ensure the target variable is a factor
df$attrition <- as.factor(df$attrition)

# Initialize results storage
results <- data.frame(variable = character(),
                      k_value = integer(),
                      accuracy = numeric(),
                      sensitivity = numeric(),
                      specificity = numeric(),
                      stringsAsFactors = FALSE)

# Loop through each continuous column
for (var in colnames(df)[sapply(df, is.numeric)]) {
  
  # Loop through k values
  for (k in 1:50) {
    # Predict using LOOCV with knn.cv
    predictions <- knn.cv(train = df[, var, drop = FALSE],
                           cl = df$attrition,
                           k = k)
    
    # Create confusion matrix
    confusion_mat <- table(predictions, df$attrition)
    
    # Use confusionMatrix function to calculate metrics
    cm <- confusionMatrix(confusion_mat)
    
    # Store results
    results <- rbind(results, data.frame(variable = var,
                                          k_value = k,
                                          accuracy = cm$overall['Accuracy'],
                                          sensitivity = cm$byClass['Sensitivity'],
                                          specificity = cm$byClass['Specificity']))
  }
}

# Find top three variables based on accuracy
top_results <- results[order(-results$accuracy), ]
top_three <- head(top_results, 3)

# Display the top three variables and their best k
print(top_three)
